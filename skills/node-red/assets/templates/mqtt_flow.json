[
  {
    "id": "mqtt-tab",
    "type": "tab",
    "label": "MQTT Integration",
    "disabled": false,
    "info": "Complete MQTT publish/subscribe flow with error handling"
  },
  {
    "id": "mqtt-broker-config",
    "type": "mqtt-broker",
    "name": "Local MQTT Broker",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "devices/node-red/status",
    "birthQos": "1",
    "birthPayload": "online",
    "birthMsg": {},
    "closeTopic": "devices/node-red/status",
    "closeQos": "1",
    "closePayload": "offline",
    "closeMsg": {},
    "willTopic": "devices/node-red/status",
    "willQos": "1",
    "willPayload": "disconnected",
    "willMsg": {}
  },
  {
    "id": "mqtt-sub-1",
    "type": "mqtt in",
    "z": "mqtt-tab",
    "name": "Subscribe sensors/+/data",
    "topic": "sensors/+/data",
    "qos": "2",
    "datatype": "json",
    "broker": "mqtt-broker-config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 160,
    "y": 100,
    "wires": [["process-sensor-data", "debug-input"]]
  },
  {
    "id": "process-sensor-data",
    "type": "function",
    "z": "mqtt-tab",
    "name": "Process Sensor Data",
    "func": "// Extract sensor ID from topic\nconst topicParts = msg.topic.split('/');\nconst sensorId = topicParts[1];\n\n// Validate and transform data\nif (!msg.payload || typeof msg.payload !== 'object') {\n    node.error('Invalid sensor data received', msg);\n    return null;\n}\n\n// Add metadata\nmsg.payload = {\n    ...msg.payload,\n    sensorId: sensorId,\n    timestamp: Date.now(),\n    processed: true\n};\n\n// Store last value in context\nconst sensorData = flow.get('sensorData') || {};\nsensorData[sensorId] = msg.payload;\nflow.set('sensorData', sensorData);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// Initialize flow context\nflow.set('sensorData', {});\nflow.set('alertThresholds', {\n    temperature: { min: 10, max: 35 },\n    humidity: { min: 20, max: 80 }\n});",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 100,
    "wires": [["check-thresholds"]]
  },
  {
    "id": "check-thresholds",
    "type": "function",
    "z": "mqtt-tab",
    "name": "Check Thresholds",
    "func": "const thresholds = flow.get('alertThresholds');\nconst alerts = [];\n\n// Check temperature\nif (msg.payload.temperature !== undefined) {\n    if (msg.payload.temperature < thresholds.temperature.min) {\n        alerts.push(`Low temperature: ${msg.payload.temperature}°C`);\n    } else if (msg.payload.temperature > thresholds.temperature.max) {\n        alerts.push(`High temperature: ${msg.payload.temperature}°C`);\n    }\n}\n\n// Check humidity\nif (msg.payload.humidity !== undefined) {\n    if (msg.payload.humidity < thresholds.humidity.min) {\n        alerts.push(`Low humidity: ${msg.payload.humidity}%`);\n    } else if (msg.payload.humidity > thresholds.humidity.max) {\n        alerts.push(`High humidity: ${msg.payload.humidity}%`);\n    }\n}\n\nif (alerts.length > 0) {\n    msg.alert = true;\n    msg.alerts = alerts;\n    return [msg, msg];  // Send to both outputs\n} else {\n    return [msg, null];  // Normal output only\n}",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 610,
    "y": 100,
    "wires": [["mqtt-pub-processed"], ["mqtt-pub-alert", "debug-alert"]]
  },
  {
    "id": "mqtt-pub-processed",
    "type": "mqtt out",
    "z": "mqtt-tab",
    "name": "Publish Processed Data",
    "topic": "",
    "qos": "1",
    "retain": false,
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt-broker-config",
    "x": 850,
    "y": 80,
    "wires": []
  },
  {
    "id": "mqtt-pub-alert",
    "type": "mqtt out",
    "z": "mqtt-tab",
    "name": "Publish Alert",
    "topic": "alerts/sensor",
    "qos": "2",
    "retain": true,
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt-broker-config",
    "x": 830,
    "y": 140,
    "wires": []
  },
  {
    "id": "inject-test",
    "type": "inject",
    "z": "mqtt-tab",
    "name": "Test Publisher",
    "props": [
      {"p": "payload"},
      {"p": "topic", "vt": "str"}
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "sensors/test-01/data",
    "payload": "{\"temperature\":25,\"humidity\":65}",
    "payloadType": "json",
    "x": 140,
    "y": 240,
    "wires": [["mqtt-pub-test"]]
  },
  {
    "id": "mqtt-pub-test",
    "type": "mqtt out",
    "z": "mqtt-tab",
    "name": "Publish Test Data",
    "topic": "",
    "qos": "2",
    "retain": false,
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt-broker-config",
    "x": 350,
    "y": 240,
    "wires": []
  },
  {
    "id": "debug-input",
    "type": "debug",
    "z": "mqtt-tab",
    "name": "Raw Input",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 370,
    "y": 40,
    "wires": []
  },
  {
    "id": "debug-alert",
    "type": "debug",
    "z": "mqtt-tab",
    "name": "Alerts",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "alerts",
    "targetType": "msg",
    "statusVal": "alerts",
    "statusType": "msg",
    "x": 810,
    "y": 200,
    "wires": []
  },
  {
    "id": "catch-mqtt-errors",
    "type": "catch",
    "z": "mqtt-tab",
    "name": "Catch MQTT Errors",
    "scope": ["mqtt-sub-1", "mqtt-pub-processed", "mqtt-pub-alert"],
    "uncaught": false,
    "x": 150,
    "y": 340,
    "wires": [["handle-mqtt-error"]]
  },
  {
    "id": "handle-mqtt-error",
    "type": "function",
    "z": "mqtt-tab",
    "name": "Handle MQTT Error",
    "func": "// Log error details\nconst errorLog = {\n    timestamp: new Date().toISOString(),\n    error: msg.error.message,\n    source: msg.error.source.name || msg.error.source.id,\n    topic: msg.topic || 'unknown'\n};\n\nnode.error('MQTT Error: ' + JSON.stringify(errorLog));\n\n// You could send to an error reporting service here\nmsg.payload = errorLog;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 340,
    "wires": [["debug-errors"]]
  },
  {
    "id": "debug-errors",
    "type": "debug",
    "z": "mqtt-tab",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 560,
    "y": 340,
    "wires": []
  }
]