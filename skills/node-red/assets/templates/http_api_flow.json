[
  {
    "id": "api-tab",
    "type": "tab",
    "label": "REST API",
    "disabled": false,
    "info": "Complete REST API with CRUD operations and authentication"
  },
  {
    "id": "http-get-items",
    "type": "http in",
    "z": "api-tab",
    "name": "GET /api/items",
    "url": "/api/items",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 120,
    "y": 100,
    "wires": [["auth-check"]]
  },
  {
    "id": "http-get-item",
    "type": "http in",
    "z": "api-tab",
    "name": "GET /api/items/:id",
    "url": "/api/items/:id",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 130,
    "y": 160,
    "wires": [["auth-check"]]
  },
  {
    "id": "http-post-item",
    "type": "http in",
    "z": "api-tab",
    "name": "POST /api/items",
    "url": "/api/items",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 130,
    "y": 220,
    "wires": [["auth-check"]]
  },
  {
    "id": "http-put-item",
    "type": "http in",
    "z": "api-tab",
    "name": "PUT /api/items/:id",
    "url": "/api/items/:id",
    "method": "put",
    "upload": false,
    "swaggerDoc": "",
    "x": 130,
    "y": 280,
    "wires": [["auth-check"]]
  },
  {
    "id": "http-delete-item",
    "type": "http in",
    "z": "api-tab",
    "name": "DELETE /api/items/:id",
    "url": "/api/items/:id",
    "method": "delete",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 340,
    "wires": [["auth-check"]]
  },
  {
    "id": "auth-check",
    "type": "function",
    "z": "api-tab",
    "name": "Authentication Check",
    "func": "// Check for API key in header\nconst apiKey = msg.req.headers['x-api-key'];\nconst validApiKeys = global.get('apiKeys') || ['demo-api-key-123'];\n\nif (!apiKey) {\n    msg.statusCode = 401;\n    msg.payload = {\n        error: 'Missing API key',\n        message: 'Please provide X-API-Key header'\n    };\n    return [null, msg];  // Send to error response\n}\n\nif (!validApiKeys.includes(apiKey)) {\n    msg.statusCode = 403;\n    msg.payload = {\n        error: 'Invalid API key',\n        message: 'The provided API key is not valid'\n    };\n    return [null, msg];  // Send to error response\n}\n\n// Add user context from API key\nmsg.user = {\n    apiKey: apiKey,\n    permissions: ['read', 'write']\n};\n\nreturn [msg, null];  // Send to router",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 220,
    "wires": [["route-request"], ["http-response-error"]]
  },
  {
    "id": "route-request",
    "type": "function",
    "z": "api-tab",
    "name": "Route Request",
    "func": "// Route based on method and path\nconst method = msg.req.method.toUpperCase();\nconst path = msg.req.path;\n\n// Initialize data store if needed\nlet dataStore = flow.get('dataStore') || {};\n\nswitch(method) {\n    case 'GET':\n        if (msg.req.params.id) {\n            // Get single item\n            const item = dataStore[msg.req.params.id];\n            if (item) {\n                msg.payload = item;\n                msg.statusCode = 200;\n            } else {\n                msg.payload = { error: 'Item not found' };\n                msg.statusCode = 404;\n            }\n        } else {\n            // Get all items\n            const items = Object.keys(dataStore).map(id => ({\n                id: id,\n                ...dataStore[id]\n            }));\n            \n            // Apply query filters\n            let filtered = items;\n            if (msg.req.query.status) {\n                filtered = filtered.filter(item => \n                    item.status === msg.req.query.status\n                );\n            }\n            \n            // Pagination\n            const page = parseInt(msg.req.query.page) || 1;\n            const limit = parseInt(msg.req.query.limit) || 10;\n            const start = (page - 1) * limit;\n            const paginatedItems = filtered.slice(start, start + limit);\n            \n            msg.payload = {\n                items: paginatedItems,\n                total: filtered.length,\n                page: page,\n                limit: limit\n            };\n            msg.statusCode = 200;\n        }\n        break;\n        \n    case 'POST':\n        // Create new item\n        const newId = Date.now().toString();\n        const newItem = {\n            ...msg.payload,\n            id: newId,\n            createdAt: new Date().toISOString(),\n            createdBy: msg.user.apiKey\n        };\n        \n        dataStore[newId] = newItem;\n        flow.set('dataStore', dataStore);\n        \n        msg.payload = newItem;\n        msg.statusCode = 201;\n        msg.headers = {\n            'Location': `/api/items/${newId}`\n        };\n        break;\n        \n    case 'PUT':\n        // Update existing item\n        const updateId = msg.req.params.id;\n        if (dataStore[updateId]) {\n            dataStore[updateId] = {\n                ...dataStore[updateId],\n                ...msg.payload,\n                id: updateId,  // Prevent ID change\n                updatedAt: new Date().toISOString(),\n                updatedBy: msg.user.apiKey\n            };\n            flow.set('dataStore', dataStore);\n            \n            msg.payload = dataStore[updateId];\n            msg.statusCode = 200;\n        } else {\n            msg.payload = { error: 'Item not found' };\n            msg.statusCode = 404;\n        }\n        break;\n        \n    case 'DELETE':\n        // Delete item\n        const deleteId = msg.req.params.id;\n        if (dataStore[deleteId]) {\n            const deletedItem = dataStore[deleteId];\n            delete dataStore[deleteId];\n            flow.set('dataStore', dataStore);\n            \n            msg.payload = {\n                message: 'Item deleted successfully',\n                deleted: deletedItem\n            };\n            msg.statusCode = 200;\n        } else {\n            msg.payload = { error: 'Item not found' };\n            msg.statusCode = 404;\n        }\n        break;\n        \n    default:\n        msg.payload = { error: 'Method not allowed' };\n        msg.statusCode = 405;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// Initialize data store\nflow.set('dataStore', {});",
    "finalize": "",
    "libs": [],
    "x": 560,
    "y": 200,
    "wires": [["validate-response"]]
  },
  {
    "id": "validate-response",
    "type": "function",
    "z": "api-tab",
    "name": "Validate Response",
    "func": "// Add standard response headers\nmsg.headers = msg.headers || {};\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['X-Response-Time'] = Date.now() - (msg.req.startTime || Date.now()) + 'ms';\n\n// Log successful requests\nnode.log(`${msg.req.method} ${msg.req.path} - ${msg.statusCode}`);\n\n// Add request ID for tracking\nif (!msg.payload.requestId) {\n    msg.payload = {\n        ...msg.payload,\n        requestId: msg._msgid\n    };\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 200,
    "wires": [["http-response-success", "debug-api"]]
  },
  {
    "id": "http-response-success",
    "type": "http response",
    "z": "api-tab",
    "name": "Success Response",
    "statusCode": "",
    "headers": {},
    "x": 970,
    "y": 200,
    "wires": []
  },
  {
    "id": "http-response-error",
    "type": "http response",
    "z": "api-tab",
    "name": "Error Response",
    "statusCode": "",
    "headers": {},
    "x": 580,
    "y": 280,
    "wires": []
  },
  {
    "id": "debug-api",
    "type": "debug",
    "z": "api-tab",
    "name": "API Log",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "statusCode",
    "statusType": "msg",
    "x": 940,
    "y": 260,
    "wires": []
  },
  {
    "id": "http-health",
    "type": "http in",
    "z": "api-tab",
    "name": "GET /health",
    "url": "/health",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 110,
    "y": 440,
    "wires": [["health-check"]]
  },
  {
    "id": "health-check",
    "type": "function",
    "z": "api-tab",
    "name": "Health Check",
    "func": "// Check system health\nconst dataStore = flow.get('dataStore') || {};\nconst itemCount = Object.keys(dataStore).length;\n\nmsg.payload = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: '1.0.0',\n    stats: {\n        items: itemCount,\n        uptime: process.uptime(),\n        memory: process.memoryUsage()\n    }\n};\n\nmsg.statusCode = 200;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 280,
    "y": 440,
    "wires": [["http-response-health"]]
  },
  {
    "id": "http-response-health",
    "type": "http response",
    "z": "api-tab",
    "name": "Health Response",
    "statusCode": "",
    "headers": {},
    "x": 470,
    "y": 440,
    "wires": []
  },
  {
    "id": "catch-api-errors",
    "type": "catch",
    "z": "api-tab",
    "name": "Catch API Errors",
    "scope": null,
    "uncaught": false,
    "x": 130,
    "y": 540,
    "wires": [["handle-api-error"]]
  },
  {
    "id": "handle-api-error",
    "type": "function",
    "z": "api-tab",
    "name": "Handle API Error",
    "func": "// Log error\nnode.error(`API Error: ${msg.error.message}`);\n\n// Prepare error response\nmsg.payload = {\n    error: 'Internal server error',\n    message: msg.error.message,\n    requestId: msg._msgid\n};\n\nmsg.statusCode = 500;\nmsg.headers = {\n    'Content-Type': 'application/json'\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 540,
    "wires": [["http-response-error"]]
  },
  {
    "id": "inject-sample-data",
    "type": "inject",
    "z": "api-tab",
    "name": "Load Sample Data",
    "props": [{"p": "payload"}],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "true",
    "payloadType": "bool",
    "x": 150,
    "y": 640,
    "wires": [["create-sample-data"]]
  },
  {
    "id": "create-sample-data",
    "type": "function",
    "z": "api-tab",
    "name": "Create Sample Data",
    "func": "// Create sample data for testing\nconst sampleData = {\n    '1': {\n        name: 'Item 1',\n        description: 'First sample item',\n        status: 'active',\n        createdAt: new Date().toISOString()\n    },\n    '2': {\n        name: 'Item 2',\n        description: 'Second sample item',\n        status: 'inactive',\n        createdAt: new Date().toISOString()\n    },\n    '3': {\n        name: 'Item 3',\n        description: 'Third sample item',\n        status: 'active',\n        createdAt: new Date().toISOString()\n    }\n};\n\nflow.set('dataStore', sampleData);\n\nmsg.payload = {\n    message: 'Sample data loaded',\n    count: Object.keys(sampleData).length\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 640,
    "wires": [["debug-sample"]]
  },
  {
    "id": "debug-sample",
    "type": "debug",
    "z": "api-tab",
    "name": "Sample Data",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 590,
    "y": 640,
    "wires": []
  }
]